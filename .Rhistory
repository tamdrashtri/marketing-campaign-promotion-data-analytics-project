broom::tidy() %>%
arrange(p.value) %>%
mutate(term = as_factor(term) %>% fct_rev()) %>%
ggplot(aes(x = estimate, y = term)) +
geom_point() +
ggrepel::geom_label_repel(aes(label = scales::dollar(estimate, accuracy = 1)),
size = 3) +
scale_x_continuous(labels = scales::dollar_format()) +
labs(title = "Linear Regression: Feature Importance",
subtitle = "Looks like no factor contributes to increases in sales") +
theme_bw()
recipe_obj <- recipe(SalesInThousands ~ ., data = train) %>%
step_string2factor(MarketSize) %>%
step_dummy(Promotion_factor, one_hot = TRUE) %>%
#step_range(AgeOfStore) %>%
step_discretize(AgeOfStore, options = list(min_unique = 1)) %>%
prep(data = train)
recipe_obj
train_tbl <- bake(recipe_obj, new_data = train)
test_tbl  <- bake(recipe_obj, new_data = test)
recipe_obj <- recipe(SalesInThousands ~ ., data = train) %>%
step_string2factor(MarketSize) %>%
step_dummy(MarketSize, Promotion_factor, one_hot = TRUE) %>%
#step_range(AgeOfStore) %>%
step_discretize(AgeOfStore, options = list(min_unique = 1)) %>%
prep(data = train)
recipe_obj
train_tbl <- bake(recipe_obj, new_data = train)
test_tbl  <- bake(recipe_obj, new_data = test)
View(train_tbl)
model_01_linear_lm_simple <- linear_reg(mode = "regression") %>%
set_engine("lm") %>%
fit(SalesInThousands ~ Promotion_factor_X1 +
Promotion_factor_X3 +
Promotion_factor_X2 +
MarketSize_Large +
MarketSize_Medium +
MarketSize_Small, data = train_tbl)
model_01_linear_lm_simple %>%
predict(new_data = test_tbl) %>%
bind_cols(test_tbl %>% select(SalesInThousands)) %>%
yardstick::metrics(truth = SalesInThousands, estimate = .pred)
# 3.1.2 Feature Importance ----
model_01_linear_lm_simple
model_01_linear_lm_simple <- linear_reg(mode = "regression") %>%
set_engine("lm") %>%
fit(SalesInThousands ~ Promotion_factor_X1 +
Promotion_factor_X3 +
Promotion_factor_X2 +
MarketSize_Large +
MarketSize_Medium +
MarketSize_Small  , data = train_tbl)
model_01_linear_lm_simple %>%
predict(new_data = test_tbl) %>%
bind_cols(test_tbl %>% select(SalesInThousands)) %>%
yardstick::metrics(truth = SalesInThousands, estimate = .pred)
# 3.1.2 Feature Importance ----
model_01_linear_lm_simple
model_01_linear_lm_simple$fit %>% class()
model_01_linear_lm_simple$fit %>%
broom::tidy() %>%
arrange(p.value) %>%
mutate(term = as_factor(term) %>% fct_rev()) %>%
ggplot(aes(x = estimate, y = term)) +
geom_point() +
ggrepel::geom_label_repel(aes(label = scales::dollar(estimate, accuracy = 1)),
size = 3) +
scale_x_continuous(labels = scales::dollar_format()) +
labs(title = "Linear Regression: Feature Importance",
subtitle = "Looks like no factor contributes to increases in sales") +
theme_bw()
split_obj <- rsample::initial_split(marketing_trnformed, prop = 0.7)
split_obj %>% training()
split_obj %>% testing()
train <- training(split_obj)
test  <- testing(split_obj)
recipe_obj <- recipe(SalesInThousands ~ ., data = train) %>%
step_string2factor(MarketSize) %>%
step_dummy(MarketSize, Promotion_factor, one_hot = TRUE) %>%
#step_range(AgeOfStore) %>%
#step_discretize(AgeOfStore, options = list(min_unique = 1)) %>%
prep(data = train)
recipe_obj
train_tbl <- bake(recipe_obj, new_data = train)
test_tbl  <- bake(recipe_obj, new_data = test)
View(train)
recipe_obj <- recipe(SalesInThousands ~ Promotion_factor, MarketSize, data = train) %>%
step_string2factor(MarketSize) %>%
step_dummy(MarketSize, Promotion_factor, one_hot = TRUE) %>%
#step_range(AgeOfStore) %>%
#step_discretize(AgeOfStore, options = list(min_unique = 1)) %>%
prep(data = train)
recipe_obj <- recipe(SalesInThousands ~ Promotion_factor + MarketSize, data = train) %>%
step_string2factor(MarketSize) %>%
step_dummy(MarketSize, Promotion_factor, one_hot = TRUE) %>%
#step_range(AgeOfStore) %>%
#step_discretize(AgeOfStore, options = list(min_unique = 1)) %>%
prep(data = train)
recipe_obj
train_tbl <- bake(recipe_obj, new_data = train)
test_tbl  <- bake(recipe_obj, new_data = test)
View(train_tbl)
# 3.1.1 Model ----
?lm
model_01_linear_lm_simple <- linear_reg(mode = "regression") %>%
set_engine("lm") %>%
fit(SalesInThousands ~ ., data = train_tbl)
model_01_linear_lm_simple <- linear_reg(mode = "regression") %>%
set_engine("lm") %>%
fit(SalesInThousands ~ Promotion_factor_X1 +
Promotion_factor_X3 +
Promotion_factor_X2 +
MarketSize_Large +
MarketSize_Medium +
MarketSize_Small, data = train_tbl)
model_01_linear_lm_simple %>%
predict(new_data = test_tbl) %>%
bind_cols(test_tbl %>% select(SalesInThousands)) %>%
yardstick::metrics(truth = SalesInThousands, estimate = .pred)
# 3.1.2 Feature Importance ----
model_01_linear_lm_simple
model_01_linear_lm_simple %>%
predict(new_data = test_tbl) %>%
bind_cols(test_tbl %>% select(SalesInThousands)) %>%
yardstick::metrics(truth = SalesInThousands, estimate = .pred)
# 3.1.2 Feature Importance ----
model_01_linear_lm_simple
model_01_linear_lm_simple$fit %>% class()
model_01_linear_lm_simple$fit %>%
broom::tidy() %>%
arrange(p.value) %>%
mutate(term = as_factor(term) %>% fct_rev()) %>%
ggplot(aes(x = estimate, y = term)) +
geom_point() +
ggrepel::geom_label_repel(aes(label = scales::dollar(estimate, accuracy = 1)),
size = 3) +
scale_x_continuous(labels = scales::dollar_format()) +
labs(title = "Linear Regression: Feature Importance",
subtitle = "Looks like no factor contributes to increases in sales") +
theme_bw()
model_01_linear_lm_simple$fit %>%
broom::tidy() %>%
arrange(p.value) %>%
mutate(term = as_factor(term) %>% fct_rev()) %>%
ggplot(aes(x = estimate, y = term)) +
geom_point() +
ggrepel::geom_label_repel(aes(label = scales::dollar(estimate, accuracy = 1)),
size = 3) +
scale_x_continuous(labels = scales::dollar_format()) +
labs(title = "Linear Regression: Feature Importance",
subtitle = "Looks like large market size, promotion 1 and 2 contribute most to sales") +
theme_bw()
linearModel$fit %>%
broom::tidy() %>%
arrange(p.value) %>%
mutate(term = as_factor(term) %>% fct_rev()) %>%
ggplot(aes(x = estimate, y = term)) +
geom_point() +
ggrepel::geom_label_repel(aes(label = scales::dollar(estimate, accuracy = 1)),
size = 3) +
scale_x_continuous(labels = scales::dollar_format()) +
labs(title = "Linear Regression: Feature Importance",
subtitle = "Looks like large market size, promotion 1 and 3 contribute most to sales") +
theme_bw()
marketing <- read_csv("WA_Fn-UseC_-Marketing-Campaign-Eff-UseC_-FastF.csv",
col_types = cols(MarketID = col_skip()))
library(simpleSetup)
# Load packages, install if needed
packages <- c('tidyverse',
'readr',
'skimr',
"GGally",
"stringr",
"DataExplorer",
"summarytools",
"recipes",
"magrittr",
"corrr",
"h2o",
"rsample",
"caret",
"fs",
"viridis",
"tidyquant",
"caret",
"parsnip",
"cowplot")
library_install(packages)
set.seed(3456)
split <- rsample::initial_split(marketing_trnformed, prop = 0.7)
split %>% training()
split %>% testing()
train <- training(split)
test  <- testing(split)
# Feature engineering
# 1. week can be categorized into 4, as categorical data
# 2. promotion turns into 3 categories too
# 3. how many locationID are there: 137 stores
marketing %>% glimpse() %>% skim()
marketing_trnformed <- marketing %>%
mutate(
Promotion = as.character(Promotion),
Promotion_factor = as_factor(Promotion),
week = as.character(week),
Week_factor = as_factor(week)
) %>%
select(-c("week", "Promotion"))
marketing_trnformed %>%
select(-c("LocationID", "AgeOfStore"))
# plot 1
promotion_plot <- marketing_trnformed %>%
select(Promotion_factor, SalesInThousands) %>%
distinct() %>%
group_by(Promotion_factor, SalesInThousands) %>%
summarise(sales = sum(SalesInThousands)) %>%
ggplot(aes(x = Promotion_factor, y = sales)) +
coord_flip() +
geom_violin(aes(fill = sales), alpha = 0.5) +
geom_jitter(width = 0.1, alpha = 0.5, color = "#2c3e50") +
theme_bw()
#add colors
# plot 2: week
week_plot <- marketing_trnformed %>%
select(Week_factor, SalesInThousands) %>%
distinct() %>%
group_by(Week_factor, SalesInThousands) %>%
summarise(sales = sum(SalesInThousands)) %>%
ggplot(aes(x = Week_factor, y = sales)) +
coord_flip() +
geom_violin(aes(fill = sales), alpha = 0.5) +
geom_jitter(width = 0.1, alpha = 0.5, color = "#2c3e50") +
theme_bw()
# plot 3: market size
marketsize_plot <- marketing_trnformed %>%
select(MarketSize, SalesInThousands) %>%
distinct() %>%
group_by(MarketSize, SalesInThousands) %>%
summarise(sales = sum(SalesInThousands)) %>%
ggplot(aes(x = MarketSize, y = sales)) +
coord_flip() +
geom_violin(aes(fill = sales), alpha = 0.5) +
geom_jitter(width = 0.1, alpha = 0.5, color = "#2c3e50") +
theme_bw()
plot_grid(promotion_plot, week_plot, marketsize_plot, ncol = 1, align = 'v', label_size = 12)
#continuous variables: ageinstores and locationID
ageofstore_plot <- marketing_trnformed %>%
select(AgeOfStore, SalesInThousands) %>%
ggplot(aes(x = SalesInThousands)) +
geom_density(color = "skyblue", fill = "skyblue", alpha = 0.5) +
scale_fill_viridis() +
theme_bw()
sales_plot <- marketing_trnformed %>%
select(AgeOfStore, SalesInThousands) %>%
ggplot(aes(x = AgeOfStore)) +
geom_density(color = "skyblue", fill = "skyblue", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 35, 5)) +
scale_fill_viridis() +
theme_bw()
plot_grid(sales_plot, ageofstore_plot)
marketing_trnformed %>% glimpse() %>% skim()
market
recipe <- recipe(SalesInThousands ~ Promotion_factor + MarketSize, data = train) %>%
step_string2factor(MarketSize) %>%
step_dummy(MarketSize, Promotion_factor, one_hot = TRUE) %>%
#step_range(AgeOfStore) %>%
#step_discretize(AgeOfStore, options = list(min_unique = 1)) %>%
prep(data = train)
recipe
train_recipe <- bake(recipe, new_data = train)
test_recipe  <- bake(recipe, new_data = test)
# 3.1 LINEAR REGRESSION - NO ENGINEERED FEATURES ----
# 3.1.1 Model ----
?lm
linearModel <- linear_reg(mode = "regression") %>%
set_engine("lm") %>%
fit(SalesInThousands ~ ., data = train_recipe)
linearModel <- linear_reg(mode = "regression") %>%
set_engine("lm") %>%
fit(SalesInThousands ~ Promotion_factor_X1 +
Promotion_factor_X3 +
Promotion_factor_X2 +
MarketSize_Large +
MarketSize_Medium +
MarketSize_Small, data = train_recipe)
linearModel %>%
predict(new_data = test_recipe) %>%
bind_cols(test_recipe %>% select(SalesInThousands)) %>%
yardstick::metrics(truth = SalesInThousands, estimate = .pred)
# 3.1.2 Feature Importance ----
linearModel
linearModel$fit %>% class()
linearModel$fit %>%
broom::tidy() %>%
arrange(p.value) %>%
mutate(term = as_factor(term) %>% fct_rev()) %>%
ggplot(aes(x = estimate, y = term)) +
geom_point() +
ggrepel::geom_label_repel(aes(label = scales::dollar(estimate, accuracy = 1)),
size = 3) +
scale_x_continuous(labels = scales::dollar_format()) +
labs(title = "Linear Regression: Feature Importance",
subtitle = "Looks like large market size, promotion 1 and 3 contribute most to sales") +
theme_bw()
linearModel$fit %>%
broom::tidy() %>%
arrange(p.value) %>%
mutate(term = as_factor(term) %>% fct_rev()) %>%
ggplot(aes(x = estimate, y = term)) +
geom_point() +
ggrepel::geom_label_repel(aes(label = scales::dollar(estimate, accuracy = 1)),
size = 3) +
scale_x_continuous(labels = scales::dollar_format()) +
labs(title = "Linear Regression: Feature Importance",
subtitle = "Looks like large market size, promotion 1 and 3 contribute most to sales") +
theme_bw()
linearModel %>%
predict(new_data = test_recipe) %>%
bind_cols(test_recipe %>% select(SalesInThousands)) %>%
yardstick::metrics(truth = SalesInThousands, estimate = .pred)
marketing <- read_csv("WA_Fn-UseC_-Marketing-Campaign-Eff-UseC_-FastF.csv",
col_types = cols(MarketID = col_skip()))
library(simpleSetup)
# Load packages, install if needed
packages <- c('tidyverse',
'readr',
'skimr',
"GGally",
"stringr",
"DataExplorer",
"summarytools",
"recipes",
"magrittr",
"corrr",
"h2o",
"rsample",
"caret",
"fs",
"viridis",
"tidyquant",
"caret",
"parsnip",
"cowplot")
library_install(packages)
set.seed(3456)
split <- rsample::initial_split(marketing_trnformed, prop = 0.7)
split %>% training()
split %>% testing()
train <- training(split)
test  <- testing(split)
# Feature engineering
# 1. week can be categorized into 4, as categorical data
# 2. promotion turns into 3 categories too
# 3. how many locationID are there: 137 stores
marketing %>% glimpse() %>% skim()
marketing_trnformed <- marketing %>%
mutate(
Promotion = as.character(Promotion),
Promotion_factor = as_factor(Promotion),
week = as.character(week),
Week_factor = as_factor(week)
) %>%
select(-c("week", "Promotion"))
marketing_trnformed %>%
select(-c("LocationID", "AgeOfStore"))
# plot 1
promotion_plot <- marketing_trnformed %>%
select(Promotion_factor, SalesInThousands) %>%
distinct() %>%
group_by(Promotion_factor, SalesInThousands) %>%
summarise(sales = sum(SalesInThousands)) %>%
ggplot(aes(x = Promotion_factor, y = sales)) +
coord_flip() +
geom_violin(aes(fill = sales), alpha = 0.5) +
geom_jitter(width = 0.1, alpha = 0.5, color = "#2c3e50") +
theme_bw()
#add colors
# plot 2: week
week_plot <- marketing_trnformed %>%
select(Week_factor, SalesInThousands) %>%
distinct() %>%
group_by(Week_factor, SalesInThousands) %>%
summarise(sales = sum(SalesInThousands)) %>%
ggplot(aes(x = Week_factor, y = sales)) +
coord_flip() +
geom_violin(aes(fill = sales), alpha = 0.5) +
geom_jitter(width = 0.1, alpha = 0.5, color = "#2c3e50") +
theme_bw()
# plot 3: market size
marketsize_plot <- marketing_trnformed %>%
select(MarketSize, SalesInThousands) %>%
distinct() %>%
group_by(MarketSize, SalesInThousands) %>%
summarise(sales = sum(SalesInThousands)) %>%
ggplot(aes(x = MarketSize, y = sales)) +
coord_flip() +
geom_violin(aes(fill = sales), alpha = 0.5) +
geom_jitter(width = 0.1, alpha = 0.5, color = "#2c3e50") +
theme_bw()
plot_grid(promotion_plot, week_plot, marketsize_plot, ncol = 1, align = 'v', label_size = 12)
#continuous variables: ageinstores and locationID
ageofstore_plot <- marketing_trnformed %>%
select(AgeOfStore, SalesInThousands) %>%
ggplot(aes(x = SalesInThousands)) +
geom_density(color = "skyblue", fill = "skyblue", alpha = 0.5) +
scale_fill_viridis() +
theme_bw()
sales_plot <- marketing_trnformed %>%
select(AgeOfStore, SalesInThousands) %>%
ggplot(aes(x = AgeOfStore)) +
geom_density(color = "skyblue", fill = "skyblue", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 35, 5)) +
scale_fill_viridis() +
theme_bw()
plot_grid(sales_plot, ageofstore_plot)
marketing_trnformed %>% glimpse() %>% skim()
market
recipe <- recipe(SalesInThousands ~ Promotion_factor + MarketSize, data = train) %>%
step_string2factor(MarketSize) %>%
step_dummy(MarketSize, Promotion_factor, one_hot = TRUE) %>%
#step_range(AgeOfStore) %>%
#step_discretize(AgeOfStore, options = list(min_unique = 1)) %>%
prep(data = train)
recipe
train_recipe <- bake(recipe, new_data = train)
test_recipe  <- bake(recipe, new_data = test)
# 3.1 LINEAR REGRESSION - NO ENGINEERED FEATURES ----
# 3.1.1 Model ----
?lm
linearModel <- linear_reg(mode = "regression") %>%
set_engine("lm") %>%
fit(SalesInThousands ~ ., data = train_recipe)
linearModel <- linear_reg(mode = "regression") %>%
set_engine("lm") %>%
fit(SalesInThousands ~ Promotion_factor_X1 +
Promotion_factor_X3 +
Promotion_factor_X2 +
MarketSize_Large +
MarketSize_Medium +
MarketSize_Small, data = train_recipe)
linearModel %>%
predict(new_data = test_recipe) %>%
bind_cols(test_recipe %>% select(SalesInThousands)) %>%
yardstick::metrics(truth = SalesInThousands, estimate = .pred)
linearModel %>%
predict(new_data = test_recipe) %>%
bind_cols(test_recipe %>% select(SalesInThousands)) %>%
yardstick::metrics(truth = SalesInThousands, estimate = .pred) %>%
rsq(test_recipe, truth = SalesInThousands, .pred)
linearModel %>%
predict(new_data = test_recipe) %>%
bind_cols(test_recipe %>% select(SalesInThousands)) %>%
yardstick::metrics(truth = SalesInThousands, estimate = .pred) %>%
yardstick::rsq(test_recipe, truth = SalesInThousands, .pred)
linearModel %>%
predict(new_data = test_recipe) %>%
bind_cols(test_recipe %>% select(SalesInThousands))
linearModel %>%
predict(new_data = test_recipe) %>%
bind_cols(test_recipe %>% select(SalesInThousands)) %>%
yardstick::metrics(truth = SalesInThousands, estimate = .pred) %>%
yardstick::rsq(truth = SalesInThousands, estimate = .pred)
linearModel %>%
predict(new_data = test_recipe) %>%
bind_cols(test_recipe %>% select(SalesInThousands)) %>%
yardstick::metrics(truth = SalesInThousands, estimate = .pred)
?yardstick::metrics
library(readr)
X14100082 <- read_csv("~/Google Drive/QUEST/DATA ANALYSIS/datasets/14100082-eng/14100082.csv")
View(X14100082)
library(readr)
canada <- read_csv("~/Google Drive/QUEST/DATA ANALYSIS/datasets/14100082-eng/14100082.csv")
View(canada)
canada <- read_csv("~/Google Drive/QUEST/DATA ANALYSIS/datasets/14100082-eng/14100082.csv")
immigrationClean <-
canada %>%
select(-(Vector:Coordinate),
-`Geographical classification`)
provinces <- c("Alberta",
"Vancouver, British Columbia",
"Toronto, Ontario",
"Manitoba",
"Montreal, Quebec",
"Nova Scotia")
status <- c("Born in Canada",
"Immigrants, landed 5 or less years earlier",
"Immigrants, landed more than 10 years earlier",
"Immigrants, landed more than 5 to 10 years earlier")
employ <- c("Unemployment rate")
# process data into a new dataset:
province <- immigrationClean %>%
filter(GEO %in% provinces,
CHARACTERISTICS %in% employ,
STATUS %in% status) %>%
mutate(Date = ymd(paste0(Ref_Date, "/01"))) %>%
select(Date,
provinces = GEO,
Value,
AGEGROUP,
CHARACTERISTICS,
STATUS)
# process data into a new dataset:
province <- canada %>%
filter(GEO %in% provinces,
CHARACTERISTICS %in% employ,
STATUS %in% status) %>%
mutate(Date = ymd(paste0(Ref_Date, "/01"))) %>%
select(Date,
provinces = GEO,
Value,
AGEGROUP,
CHARACTERISTICS,
STATUS)
